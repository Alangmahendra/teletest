{"version":3,"sources":["kta-logo.jpeg","logo.svg","pages/Home.jsx","components/Calling.jsx","pages/Call.jsx","App.js","serviceWorker.js","index.js","config.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","Container","Row","Col","Link","to","viewBox","id","fill","d","transform","width","href","src","kta","alt","Component","Calling","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSessionError","error","setState","onPublish","console","log","onPublishError","onSubscribe","onSubscribeError","toggleVideo","publishVideo","state","connection","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publisherEventHandlers","accessDenied","streamCreated","streamDestroyed","_ref","reason","concat","subscriberEventHandlers","videoEnabled","videoDisabled","_this$props$credentia","credentials","apiKey","sessionId","token","_this$state","dist","onError","eventHandlers","style","display","height","marginTop","marginBottom","properties","insertMode","Call","Calling_Calling","App","BrowserRouter","Switch","Route","exact","path","component","Call_Call","assign","Boolean","window","location","hostname","match","renderApp","ReactDOM","render","src_App_0","document","getElementById","fetch","then","data","json","catch","err","alert","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5aea27d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kta-logo.0d688806.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport {Container,Row,Col} from 'reactstrap'\nimport {Link} from 'react-router-dom'\nimport kta from '../kta-logo.jpeg'\n// d=\"M250,400 a150,150 0 0,1 0,-300a150,150 0 0,1 0,300Z\" transform=\"rotate(35,250,250)\"\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"gradient\">\n      <center>\n      <Container>\n        <Row>\n          <Col>\n            <div className=\"yellowButton\">\n            <Link to=\"/call\">\n            <svg viewBox=\"75 50 400 400\">\n              <path id=\"curve\" fill=\"transparent\" d=\"M250,400\n                a150,150 0 0,1 0,-350a150\" transform=\"rotate(90,250,250)\"/>\n              <text className=\"ctx\" width=\"500\">\n                <textPath href=\"#curve\">\n                  TEKAN UNTUK KONSULTASI DOKTER UMUM\n                </textPath>\n              </text>\n            </svg>\n            </Link>\n          </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n          <div className=\"whiteSpace\">\n              <Row>\n              <Col>\n                <img src={kta} alt=\"logo\"/>\n              </Col>\n              <Col>\n                    <Row>\n                    <div className=\"ktaFont kiri\">KLINIK KTA</div> \n                    </Row>\n                    <Row>\n                      <div className=\"ktaFont2 kiri2\">SRENGSENG JUNCTION</div>\n                    </Row>\n              </Col>\n              </Row>\n          </div>\n          </Col>\n          <Col>\n          <div className=\"whiteSpace practech\">\n            PRACTECH\n          </div>\n          </Col>\n        </Row>\n        </Container>\n        </center>\n      </div >\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber } from 'opentok-react';\n\nexport default class Calling extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          error: null,\n          connection: 'Connecting',\n          publishVideo: true,\n        };\n    \n        this.sessionEventHandlers = {\n          sessionConnected: () => {\n            this.setState({ connection: 'Connected' });\n          },\n          sessionDisconnected: () => {\n            this.setState({ connection: 'Disconnected' });\n          },\n          sessionReconnected: () => {\n            this.setState({ connection: 'Reconnected' });\n          },\n          sessionReconnecting: () => {\n            this.setState({ connection: 'Reconnecting' });\n          },\n        };\n    \n        this.publisherEventHandlers = {\n          accessDenied: () => {\n            console.log('User denied access to media source');\n          },\n          streamCreated: () => {\n            console.log('Publisher stream created');\n          },\n          streamDestroyed: ({ reason }) => {\n            console.log(`Publisher stream destroyed because: ${reason}`);\n          },\n        };\n        \n    \n        this.subscriberEventHandlers = {\n          videoEnabled: () => {\n            console.log('Subscriber video enabled');\n          },\n          videoDisabled: () => {\n            console.log('Subscriber video disabled');\n          },\n        };\n      }\n    \n      onSessionError = error => {\n        this.setState({ error });\n      };\n    \n      onPublish = () => {\n        console.log('Publish Success');\n      };\n    \n      onPublishError = error => {\n        this.setState({ error });\n      };\n    \n      onSubscribe = () => {\n        console.log('Subscribe Success');\n      };\n    \n      onSubscribeError = error => {\n        this.setState({ error });\n      };\n    \n      toggleVideo = () => {\n        this.setState({ publishVideo: !this.state.publishVideo });\n      };\n    \n      render() {\n        const { apiKey, sessionId, token } = this.props.credentials;\n        const { error, connection, publishVideo } = this.state;\n        return (\n          <div>\n            {/* <div id=\"sessionStatus\">Session Status: {connection}</div> */}\n            {error ? (\n              <div className=\"error\">\n                <strong>Error:</strong> {error}\n              </div>\n            ) : null}\n            <OTSession \n              apiKey={apiKey}\n              sessionId={sessionId}\n              token={token}\n              onError={this.onSessionError}\n              eventHandlers={this.sessionEventHandlers}\n            >\n              <div style={{display:\"none !important\",width:\"0px\",height:\"0px\",marginTop:\"-70px\",marginBottom:\"20px\"}}>\n              <OTPublisher className=\"layerMinus\" style={{display:\"none\"}}\n                properties={{ publishVideo, width: \"100%\", height: \"100%\",insertMode:\"append\" }}\n                onPublish={this.onPublish}\n                onError={this.onPublishError}\n                eventHandlers={this.publisherEventHandlers}\n              />\n              </div>\n              <div style={{marginTop:\"68.5px\"}}>\n              <OTStreams>\n                <OTSubscriber className=\"layerPlus\"\n                  properties={{publishVideo, width: 786, height: 386,insertMode:\"append\" }}\n                  onSubscribe={this.onSubscribe}\n                  onError={this.onSubscribeError}\n                  eventHandlers={this.subscriberEventHandlers}\n                />\n              </OTStreams>\n              </div>\n              {/* <button id=\"videoButton\" onClick={this.toggleVideo}>\n                {publishVideo ? 'Disable' : 'Enable'} Video\n              </button> */}\n            </OTSession>\n          </div>\n        );\n      }\n}\n","import React, { Component } from 'react'\nimport Calling from '../components/Calling'\nimport {Container,Row,Col} from 'reactstrap'\nimport {Link} from 'react-router-dom'\nexport default class Call extends Component {\n  render() {\n    console.log(this.props)\n    return (\n      <div className=\"gradient\">\n        <center>\n        <Container>\n          <Row>\n            <Col>\n              <div className=\"blueBorder\">\n                <Calling credentials={this.props.credentials}/>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n            <Link to=\"/\">\n            <div className=\"whiteSpace ktaFont\" style={{marginBottom:\"80px\",marginTop:\"50px\"}}>\n              AKHIRI SESI\n            </div>\n            </Link>\n            </Col>\n          </Row>\n        </Container>\n        </center>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/Home'\nimport Call from './pages/Call'\nimport {Route,Switch,BrowserRouter as Router} from 'react-router-dom'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home}/>\n              <Route exact path=\"/call\" component={(props)=> <Call {...props} credentials={this.props.credentials} />}/>\n            </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n    SAMPLE_SERVER_BASE_URL,\n    API_KEY,\n    SESSION_ID,\n    TOKEN\n} from './config';\n\n\n    function renderApp(credentials){\n        ReactDOM.render(<App credentials={credentials}></App>, document.getElementById('root'));\n    }\n\nif(API_KEY && TOKEN && SESSION_ID){\n    renderApp({\n    apiKey: API_KEY,\n    sessionId: SESSION_ID,\n    token: TOKEN,\n    })\n}else{\n    fetch(SAMPLE_SERVER_BASE_URL)\n    .then(data => data.json())\n    .then(renderApp)\n    .catch(err =>{\n        console.error('Failed to get session credentials', err);\n        alert('Failed to get opentok sessionId and token. Make sure you have updated the config.js file.');\n    })\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst SAMPLE_SERVER_BASE_URL = 'https://alangmahendra.com/api/room/session'\n\nconst API_KEY = '';\nconst SESSION_ID = '';\nconst TOKEN = '';\n\nexport {\n  SAMPLE_SERVER_BASE_URL,\n  API_KEY,\n  SESSION_ID,\n  TOKEN,\n};\n"],"sourceRoot":""}